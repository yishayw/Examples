<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.apache.org/royale/spark"
	skinClass="components.CollapsiblePanelSkin"
	width="100%"
	focusEnabled="false"
	>
	<s:layout>
		<s:VerticalLayout 
			gap="7"
			paddingTop="8"
			paddingBottom="8"
			paddingLeft="8"
			paddingRight="8"
			/>
	</s:layout>
	<fx:Metadata>
		[SkinState("open_enabled")]
		[SkinState("closed_enabled")]
		[SkinState("open_disabled")]
		[SkinState("closed_disabled")]
		[SkinState("open_enabled_bottom")]
		[SkinState("closed_enabled_bottom")]
		[SkinState("open_disabled_bottom")]
		[SkinState("closed_disabled_bottom")]
		[Event(name="closed", type="org.apache.royale.events.Event")]
		[Event(name="opened", type="org.apache.royale.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[

			import spark.components.Button;

			[SkinPart( required="true" )]
			public var header : Button;

			protected var _open : Boolean = true;

			private var _title : String = "";

			public function set open( open : Boolean ) : void
			{
				_open = open;

				if( header )
				{
					//header.open = _open;
				}
				invalidateSkinState();
				dispatchEvent( new Event( open ? "opened" : "closed" ) );
			}

			public function get open() : Boolean
			{
				return _open;
			}

			protected var _position : String = "top";

			[Bindable]
			[Inspectable( category="General", enumeration="top,middle,bottom,solo", defaultValue="top" )]
			public function set position( position : String ) : void
			{
				_position = position;

				if( header )
				{
					//header.position = _position;
				}
				invalidateSkinState();
			}

			public function get position() : String
			{
				return _position;
			}

			override protected function getCurrentSkinState() : String
			{
				var state : String = open ? "open" : "closed";
				state += enabled ? "_enabled" : "_disabled";

				switch( position )
				{
					case "bottom":
					case "solo":
						state += "_" + position;
						break;
				}
				return state;
			}

			public function set title( value : String ) : void
			{
				_title = value;

				if( header )
					header.label = value;
			}

			public function get title() : String
			{
				return _title;
			}

			override protected function partAdded( partName : String, instance : Object ) : void
			{
				super.partAdded( partName, instance );

				if( instance == header )
				{
					header.addEventListener( MouseEvent.CLICK, onClickHeader );
					//header.position = _position;
					//header.open = _open;
					header.label = title;
				}
			}

			override protected function partRemoved( partName : String, instance : Object ) : void
			{
				super.partRemoved( partName, instance );

				if( instance == header )
				{
					header.removeEventListener( MouseEvent.CLICK, onClickHeader );
				}
			}

			protected function onClickHeader( event : MouseEvent ) : void
			{
				open = !open;
			}

			public function set condition( condition : String ) : void
			{
				//includeInLayout = visible = false;
//
				//if( condition != null )
				//{
					//var status : Number = SMBridge.callProperty( "container.getEdit().checkCondition()", condition );
//
					//if( status != MenuStatus.ENABLED )
					//{
						//return;
					//}
				//}
				//includeInLayout = visible = true;
			}
		]]>
	</fx:Script>
</s:SkinnableContainer>
