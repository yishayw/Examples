<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.apache.org/royale/mx"
	xmlns:s="library://ns.apache.org/royale/spark"
	useHandCursor="true"
	useHandCursor.disabled="false"
	buttonMode="true"
	buttonMode.disabled="false"
	minWidth="44"
	height="24"
	creationComplete="init()"
	>

	<!-- host component -->
	<fx:Metadata>
		[Event( name = "change", type = "org.apache.royale.events.Event" )]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[


			import org.apache.royale.events.IEventDispatcher;
			import org.apache.royale.events.Event;
			import mx.events.MouseEvent;
			import org.apache.royale.utils.getTimer;

			import mx.collections.ArrayList;
			import mx.events.FlexEvent;


			private var _selected : Boolean;

			private var _toggle : Boolean;

			private var _lastClickTime : int;

			public var isExternalLink : Boolean = false;

			private function init():void
			{
				_toggle = true;
				_lastClickTime = getTimer();
				focusEnabled = false;
				addEventListener(mx.events.MouseEvent.CLICK, clickHandler);
				if (_labelPending)
				{
					labelDisplay.text = _label;
					if (parent)
						(parent as IEventDispatcher).dispatchEvent(new Event("layoutNeeded"));			
				}
				addEventListener(mx.events.MouseEvent.MOUSE_DOWN, mouseHandler);
			}

			[Bindable]
			public function get selected() : Boolean
			{
				return _selected;
			}

			private function mouseHandler(event:mx.events.MouseEvent):void
			{
				currentState = event.type == !enabled ? 'disabled' :
				       	mx.events.MouseEvent.MOUSE_DOWN ? "down" :
					event.type == mx.events.MouseEvent.MOUSE_UP ? "up" :
					event.type == mx.events.MouseEvent.ROLL_OVER ? "over" :
					selected ? "selected" : "normal";
			}


			public function set selected( value : Boolean ) : void
			{
				if( value == _selected )
				{
					return;
				}
				_selected = value;
				dispatchEvent( new FlexEvent( FlexEvent.VALUE_COMMIT ) );
				currentState = "selected";
			}

			private var _labelPending:Boolean;
			private var _label:String;
			public function set label(value:String):void
			{
				_label = value;
				if (!labelDisplay)
				{
					_labelPending = true;
				} else
				{
					labelDisplay.text = value;
					if (parent)
						(parent as IEventDispatcher).dispatchEvent(new Event("layoutNeeded"));			
				}
			}

			/**
			 *  @private
			 */
			public function get label():String          
			{
				return _label;
			}

			[Bindable]
			public function get toggle() : Boolean
			{
				return _toggle;
			}

			public function set toggle( value : Boolean ) : void
			{
				if( value == _toggle )
				{
					return;
				}

				_toggle = value;
			}

			protected function clickHandler( event : mx.events.MouseEvent ) : void
			{
				var clickTime : int = getTimer();
				var isDoubleClick : Boolean = ( _lastClickTime + 400 ) > clickTime;
				_lastClickTime = clickTime;

				if( isDoubleClick )
				{
					return;
				}

				if( _toggle && !isExternalLink )
				{
					selected = !selected;
					dispatchEvent( new Event( Event.CHANGE ) );
					event.updateAfterEvent();
				}
			}

	]]>
	</fx:Script>
	<s:states>
		<s:State name="up" />
		<s:State name="over" />
		<s:State name="down" />
		<s:State name="selected" />
		<s:State name="disabled" />
	</s:states>

	<s:Label
		id="labelDisplay"
		paddingTop="18"
		textAlign="center"
		color="#f2f2f2"
		color.over="#92cdcf"
		color.selected="#92cdcf"
		fontSize="11.5"
		width="100%"
		verticalCenter="0"
		alpha.disabled="0.3"
		paddingLeft="9"
		paddingRight="9"
		/>

</s:Group>
