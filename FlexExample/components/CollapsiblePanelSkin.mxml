<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin
	xmlns="cc.sitemaker.sidebar.view.*"
	xmlns:collapsiblepanel="cc.sitemaker.common.views.collapsiblepanel.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	height.closed="26"
	>

	<fx:Metadata>
		[HostComponent("components.CollapsiblePanel")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import flash.events.Event;

			/* Define the skin elements that should not be colorized.
			For panel, border and title backround are skinned, but the content area and title text are not. */
			static private const exclusions : Array = [ "background", "titleField", "contentGroup", "header" ];

			public override function get colorizeExclusions() : Array
			{
				return exclusions;
			}

			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill : Array = [];

			public override function get contentItems() : Array
			{
				return contentFill
			}
			;
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State
			name="open_enabled"
			stateGroups="open"
			/>
		<s:State
			name="closed_enabled"
			stateGroups="closed"
			/>
		<s:State
			name="open_disabled"
			stateGroups="open,disabled_grp"
			/>
		<s:State
			name="closed_disabled"
			stateGroups="closed,disabled_grp"
			/>
		<s:State
			name="open_enabled_bottom"
			stateGroups="open,bottom"
			/>
		<s:State
			name="closed_enabled_bottom"
			stateGroups="closed"
			/>
		<s:State
			name="open_disabled_bottom"
			stateGroups="open,bottom,disabled_grp"
			/>
		<s:State
			name="closed_disabled_bottom"
			stateGroups="closed,disabled_grp"
			/>
		<s:State
			name="open_enabled_solo"
			stateGroups="open,bottom"
			/>
		<s:State
			name="closed_enabled_solo"
			stateGroups="closed"
			/>
		<s:State
			name="open_disabled_solo"
			stateGroups="open,bottom,disabled_grp"
			/>
		<s:State
			name="closed_disabled_solo"
			stateGroups="closed,disabled_grp"
			/>
	</s:states>

	<fx:Declarations>
		<s:Sequence
			id="toOpen"
			effectEnd="dispatchEvent(new Event('PANEL_OPENED'));"
			>
			<s:SetAction
				property="visible"
				targets="{ [ contentParent, bg ] }"
				/>
			<s:SetAction
				property="includeInLayout"
				targets="{ [ contentParent, bg ] }"
				/>
			<s:Resize
				duration="140"
				target="{ this }"
				/>
			<s:SetAction
				property="verticalScrollPolicy"
				targets="{ [contentParent] }"
				/>
		</s:Sequence>
		<s:Sequence
			id="toClosed"
			effectEnd="dispatchEvent(new Event('PANEL_CLOSED'));"
			>
			<s:SetAction
				property="verticalScrollPolicy"
				targets="{ [contentParent] }"
				/>
			<s:Resize
				duration="140"
				target="{ this }"
				/>
			<s:SetAction
				property="visible"
				targets="{ [ contentParent, bg ] }"
				/>
			<s:SetAction
				property="includeInLayout"
				targets="{ [ contentParent, bg ] }"
				/>
		</s:Sequence>
	</fx:Declarations>

	<s:transitions>
		<s:Transition
			fromState="closed_enabled"
			toState="open_enabled"
			effect="{ toOpen }"
			/>
		<s:Transition
			fromState="open_enabled"
			toState="closed_enabled"
			effect="{ toClosed }"
			/>
		<s:Transition
			fromState="closed_enabled_bottom"
			toState="open_enabled_bottom"
			effect="{ toOpen }"
			/>
		<s:Transition
			fromState="open_enabled_bottom"
			toState="closed_enabled_bottom"
			effect="{ toClosed }"
			/>
		<s:Transition
			fromState="closed_enabled_solo"
			toState="open_enabled_solo"
			effect="{ toOpen }"
			/>
		<s:Transition
			fromState="open_enabled_solo"
			toState="closed_enabled_solo"
			effect="{ toClosed }"
			/>
	</s:transitions>

	<!-- background -->
	<s:Rect
		id="bg"
		top="10"
		bottom="0"
		left="0"
		right="0"
		visible="true"
		visible.closed="false"
		includeInLayout="true"
		includeInLayout.closed="false"
		>
		<s:fill>
			<s:SolidColor color="0xe6e7e8" />
		</s:fill>
	</s:Rect>

	<!-- botton border when open -->
	<s:Rect
		height="1"
		bottom="0"
		left="0"
		right="0"
		excludeFrom="closed,bottom"
		>
		<s:fill>
			<s:SolidColor color="0x636467" />
		</s:fill>
	</s:Rect>

	<s:Button
		id="header"
		top="0"
		left="0"
		right="0"
		height="24"
		minWidth="0"
		minHeight="0"
		/>

	<s:Scroller
		id="contentParent"
		left="1"
		right="0"
		top="24"
		bottom="1"
		bottom.bottom="4"
		includeInLayout="true"
		includeInLayout.closed="false"
		visible="true"
		visible.closed="false"
		alpha.disabled_grp="0.4"
		mouseChildren.disabled_grp="false"
		verticalScrollPolicy="auto"
		verticalScrollPolicy.closed="off"
		>
		<!--
		Note: setting the minimum size to 0 here so that changes to the host component's
		size will not be thwarted by this skin part's minimum size.   This is a compromise,
		more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
		-->
		<s:Group
			id="contentGroup"
			width="100%"
			height="100%"
			minWidth="0"
			minHeight="0"
			>
			<s:layout>
				<s:VerticalLayout
					paddingLeft="20"
					paddingRight="20"
					paddingTop="20"
					paddingBottom="20"
					/>
			</s:layout>
		</s:Group>
	</s:Scroller>

</s:SparkSkin>
